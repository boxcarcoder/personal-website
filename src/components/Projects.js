import React, { Fragment, useState } from 'react';

const Projects = () => {
  const [displayTech, toggleDisplayTech] = useState(false);

  const [displayDeployment, toggleDisplayDeployment] = useState(false);

  const displayTechList = () => {
    if (!displayTech) {
      return null;
    } else {
      return (
        <Fragment>
          <h3>
            This application is developed with the following technologies:
          </h3>
          <ul>
            <li>Javascript ES6</li>
            <li>React</li>
            <ul>
              <li>React Hooks</li>
              <li>React Redux</li>
            </ul>
            <li>Node.js</li>
            <ul>
              <li>npm</li>
            </ul>
            <li>Python</li>
            <ul>
              <li>SQLAlchemy</li>
              <li>Flask</li>
            </ul>
            <li>3rd party APIs</li>
            <ul>
              <li>Twilio API</li>
              <li>PRAW Reddit API</li>
            </ul>
          </ul>
        </Fragment>
      );
    }
  };

  const displayDeploymentList = () => {
    if (!displayDeployment) {
      return null;
    } else {
      return (
        <Fragment>
          <h3>
            This application is deployed with the following configurations:
          </h3>
          <ul>
            <li>Domain and distributions:</li>
            <ul>
              <li>Domain registered through Porkbun.</li>
              <li>
                SSL Certificate generated by Amazon AWS ACM for security and
                encryption.
              </li>
              <li>DNS configured through CloudFlare to direct requests: </li>
              <ul>
                <li>
                  requests to my domains are redirected to distributions to
                  respond with static assets.
                </li>
                <li>
                  requests to API calls are redirected to the server-side, which
                  is handled by an AWS Elastic Beanstalk load-balancer that's
                  configured with the SSL certificate.
                </li>
              </ul>
              <li>Static assets hosted on AWS S3 buckets.</li>
              <li>Distributions set up with AWS CloudFront.</li>
            </ul>
            <li>Server, API routes, and Database</li>
            <ul>
              <li>
                Flask server is configured with CORS to allow requests from my
                client-side domains.
              </li>
              <li>
                Flask server with API routes are deployed to AWS Elastic
                Beanstalk.
              </li>
              <li>
                The Elastic Beanstalk environment is configured with a load
                balancer to listen for domains listed on my client-side SSL
                certificate.
              </li>
              <li>
                My CloudFlare DNS server uses CNAME records to redirect API
                requests to the Elastic Beanstalk environment to the domains
                listed on the SSL certificate.
              </li>
              <li>The MySQL database is hosted on AWS RDS.</li>
            </ul>
          </ul>
        </Fragment>
      );
    }
  };

  return (
    <Fragment>
      <div className='reddalerts'>
        <h2 style={{ color: ' rgb(103, 197, 103)' }}>ReddAlerts</h2>

        <h3>
          An application for users to monitor their favorite Subreddits from the
          website, Reddit, based on specified keywords.
        </h3>

        <div className='slider'>
          <div className='slide' id='slide-1'>
            <img
              src={require('../images/reddalerts1.png')}
              alt='landingPage'
              className='photo'
            ></img>
          </div>
          <div className='slide' id='slide-2'>
            <img
              src={require('../images/reddalerts2.png')}
              alt='signUp'
              className='photo'
            ></img>
          </div>
          <div className='slide' id='slide-3'>
            <img
              src={require('../images/reddalerts3.png')}
              alt='settings'
              className='photo'
            ></img>
          </div>
          <div className='slide' id='slide-4'>
            <img
              src={require('../images/reddalerts4.png')}
              alt='dashboard'
              className='photo'
            ></img>
          </div>
        </div>

        <div className='linkToProjectGroup'>
          <a
            href='https://reddalerts.com'
            target='_blank'
            rel='noopener noreferrer'
          >
            <text className='linkToProject'>Get the Full Experience</text>
          </a>
        </div>

        <div className='overview'>
          <h3>Overview:</h3>
          <ul>
            <li>
              Users can register for an account, that will be associated with
              their phone number.
            </li>
            <li>
              Users can specify different Subreddits, and corresponding
              Keywords, to monitor.
            </li>
            <li>
              When a monitored Subreddit has a rising post that contains a
              specified Keyword, the post's link is sent as a text message to
              the user.
            </li>
          </ul>

          <div className='technologyList'>
            <button
              type='input'
              onClick={() => toggleDisplayTech(!displayTech)}
              style={{ margin: '15px' }}
            >
              Developed With
            </button>

            {displayTechList()}

            <button
              type='input'
              onClick={() => toggleDisplayDeployment(!displayDeployment)}
            >
              Deployed With
            </button>

            {displayDeploymentList()}
          </div>
        </div>
      </div>
    </Fragment>
  );
};

export default Projects;

{
  /* <p>
I wrote each React component using functional components, as opposed
to class components, due to a cleaner code style as well as the
reduced need for using the `this` keyword that is prevalent in class
components. With functional components, I make use of destructuring
props as well as React Redux states for each component to use for
rendering. I utilize a React Redux store, actions, and reducers to
place and change global app state. Using React Redux allowed me to
separate the logic between components and state management. Redux
action objects, containing a type and payload, are dispatched by
action creators to the store, which then sends the action object and
the application's current state to the reducers. The corresponding
reducer will then produce a new state for the store, based on the
action object received and the current state of the application. The
action creators are triggered by user interactions with the React
components, as well as by React hooks. Many of the React components
utilize the useState() and useEffect() React hooks. The use of hooks
allowed me to use local state and side effects without the need to
write classes. For example, I would have needed to write a constructor
to initialize a component's local state, and used `componentDidMount()
or componentDidUpdate()` to change the state. With useState(), I can
create the local state with a function call along with a state
modifier handler. Any time I need to set or change the state, I can
call the state modifier handler. With the use of the useEffect() hook,
I was able to run side effects without the use of `componentDidMount()
or componentDidUpdate()`. I found that this style of code was more
clean and intuitive to read. I found the use of ES6+ Javascript
excellent for numerous reasons. The use of arrow functions made the
React component code more readable with the use of functional
components and how props and Redux states are destructured. Error
handling through the try and catch pattern, as well as the async and
await pattern to deal with promises were very useful for dealing with
asynchronous operations, such as fetching or updating data in the
server-side.
</p> */
}
